基础语法：
标识符：
1.第一个字符必须是字母或下划线
2.其他部分是字母数字下划线
3.区分大小写

注释：
单行注释以#开头
多行注释可以用多个#，或者
'''
注释行
注释行
'''
或者

"""
注释行
注释行
"""

行与缩进：
使用缩进表示代码块，不需要使用大括号{}(缩进不一致会导致运行错误)

if True:
	print("True")
else:
	print("False")


多行语句：
通常是一行写完一条语句，如果语句太长，可以使用反斜杠来实现多行语句，例如：
total = item_one + \
	item_two + \
	item_three
在[],{}或者()中的多行语句不需要使用反斜杠，例如：
total = ['item_one', 'item_two', 'item_three',
	'item_four', 'item_five']

数据类型：
number有四种数据类型整数，长整数，浮点数和复数
int（整数），如1
long（长整数），比较大的整数
float（浮点数），如1.23， 3E-2
complex（复数），如1+2j，1.1+2.2j

字符串：
单引号和双引号完全相等
三引号可以指定一个多行字符串
使用反斜杠转义特殊字符，如果不想让反斜杠发生转义，可以在字符串前添加r  反斜杠在行尾时候为续行符
如r'Ru\noob'
字符串有两种索引方式，从左到右以0开始，从右到左以-1开始

空行：
函数之间空行
类方法之间空行
类和函数入口之间空行

print输出：
Print默认是换行输出的
如果不想换行可以再末尾加上end = " ", print( x, end = " ")

import和from...import
将整个模块导入： import somemodule
导入模块中的某个函数 from somemodule import somefunction
导入模块中的多个函数 from somemodule import firstfunc, secondfunc
导入模块中的所有函数 from somemodule import *

help() 函数:
help(max)可以打印一个函数的文档字符串

基本数据类型：
python中的变量不需要声明，但是在使用前必须赋值，赋值后变量才会被创建
允许你同时为多个变量赋值，如 a = b = c = 1 三个变量被分配到相同的内存空间上
也允许位多个对象指定多个变量 如a, b, c = 1, 2, "runoob"

6个标准数据类型：
Number
String String和Tuple中的元素不能被修改，list和字典中的元素可以被修改（字典可以改value不能修改key）
List
Tuple（元组） 当Tuple中只有一个元素时比较特殊应该写完tup(20,)
Sets（集合）
Dictionary（字典）
在Python3里只有一种整数类型int，表示为长整型，没有python2中的Long
内置的type函数可以用来查询变量所指的对象类型
print(type(a), type(b))
此外还可以用isinstance来判断
a = 111
isinstance(a, int)
True

type和isinstance的区别：
type()不会认为子类是一种父类类型
isinstance()会认为子类是一种父类类型
可以通过del语句删除一些对象引用：
del var_a，var_b

数值运算：
2/4 = 0.5除法得到一个浮点数
2//4 = 0除法得到一个整数
2**5 = 32乘方

set()集合：
使用{}或者set()创建集合
a = set('abracadabra')
b = set('alacazam')
 
print(a)
# a和b的差集
print(a - b) = {'b', 'd', 'r'}
# a和b的并集
print(a | b) = {'l', 'r', 'a', 'c', 'z', 'm', 'b', 'd'}  
# a和b的交集  
print(a & b) = {'a', 'c'}
# a和b中不同时存在的元素    
print(a ^ b) = {'l', 'r', 'z', 'm', 'b', 'd'} 

int(x [,base]):将x转换为一个整数
float(x):将x转换到一个浮点数
complex(real [,imag]):创建一个复数
str(x):将对象 x 转换为字符串
repr(x):将对象 x 转换为表达式字符串
eval(str):用来计算在字符串中的有效Python表达式,并返回一个对象
tuple(s):将序列 s 转换为一个元组
list(s):将序列 s 转换为一个列表
set(s):转换为可变集合
dict(d):创建一个字典。d 必须是一个序列 (key,value)元组。
frozenset(s):转换为不可变集合
chr(x):将一个整数转换为一个字符
ord(x):将一个字符转换为它的整数值
hex(x):将一个整数转换为一个十六进制字符串
oct(x):将一个整数转换为一个八进制字符串


成员运算符：in，not in
身份运算符：is, is not    is判断的是不是同一个引用对象，==判断是不是值相等

类型转换：
int(x) 将x转换为一个整数。
float(x) 将x转换到一个浮点数。
complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。
complex(x, y) 转换为复数，x为实数部分，y为虚数部分
在交互模式中，最后被输出的表达式结果被赋值给变量_
a = 12.5/100
b = 100.50
a*b
12.5625
b+_
113.0625
round(_,2)
113.06
_为只读变量


数学函数：
abs(x)	返回数字的绝对值，如abs(-10) 返回 10
ceil(x)	返回数字的上入整数，如math.ceil(4.1) 返回 5
cmp(x, y)如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1。 Python 3 已废弃 。使用operator下的gt(>)，ge(>=)，eq(=)，lt(<)，le(<=)代替
exp(x)	返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045
fabs(x)	返回数字的绝对值，如math.fabs(-10) 返回10.0
floor(x)	返回数字的下舍整数，如math.floor(4.9)返回 4
log(x)	如math.log(math.e)返回1.0,math.log(100,10)返回2.0
log10(x)	返回以10为基数的x的对数，如math.log10(100)返回 2.0
max(x1, x2,...)	返回给定参数的最大值，参数可以为序列。
min(x1, x2,...)	返回给定参数的最小值，参数可以为序列。
modf(x)	返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。
pow(x, y)	x**y 运算后的值。
round(x [,n])	返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。
sqrt(x)	返回数字x的平方根

随机数函数：
choice(seq)	从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。
randrange ([start,] stop [,step])	从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1
random()	随机生成下一个实数，它在[0,1)范围内。
seed([x])	改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。
shuffle(lst)	将序列的所有元素随机排序
uniform(x, y)	随机生成下一个实数，它在[x,y]范围内。
random.sample(sequence,length) 可以从指定的序列中，随机的截取指定长度的片断，不修改原序列。
random.randint(x,y)　#随机生一个整数int类型，可以指定这个整数的范围

三角函数：
acos(x)	返回x的反余弦弧度值。
asin(x)	返回x的反正弦弧度值。
atan(x)	返回x的反正切弧度值。
atan2(y, x)	返回给定的 X 及 Y 坐标值的反正切值。
cos(x)	返回x的弧度的余弦值。
hypot(x, y)	返回欧几里德范数 sqrt(x*x + y*y)。
sin(x)	返回的x弧度的正弦值。
tan(x)	返回x弧度的正切值。
degrees(x)	将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0
radians(x)	将角度转换为弧度

round函数：round(10.5) = 10;round(11.5) = 12   python当小数点是5的时候奇进偶弃，使用时需要注意（4舍6入5看齐,奇进偶不进）

python字符串格式化符号（字符串格式化和c语言中的sprintf语法一样）：
print("我叫 %s 今年 %d 岁！" % ('小明', 10))
我叫 小明 今年 10 岁！
%c 格式化字符及其ASCII码
%s 格式化字符串
%d 格式化整数
%u 格式化无符号整型
%o 格式化无符号八进制
%x 格式化无符号十六进制
%X 格式化无符号十六进制数（大写）
%f 格式化浮点数，可指定小数点后的精度
%e 用科学计数法格式化浮点数
%E 作用同%e，用科学计数法格式化浮点数
%g %f和%e的简写
%G %f和%E的简写
%p 用十六进制数格式化变量的地址
如果需要输出单一的%则可用%进行转义 即'%%' = %

python的字符串内建函数
capitalize()将字符串的第一个字符转为大写
center（width，fillchar）例如str = 'a'则str.center（5，'*'） = '**a**'
count(str, beg = 0, end = len(string))  beg到end之间str出现的次数
bytes.decode(encoding="utf-8", errors="strict")	使用byte中的解码方法
encode(encoding='UTF-8',errors='strict')string中的编码方法	
expandtabs(tabsize=n)把字符串中的tab转换成n个空格
find(str, beg = 0, end = len(string))检查是否包含str字串，如果包含返回子串开始的索引，不包含返回-1
isalnum()如果字符串不为空且仅由字母和数字组成返回True否则返回false
isalpha()如果字符串不为空且仅由字母组成返回True否则返回false
isdigit()如果字符串不为空且仅由数字组成返回True否则返回false	
join(seq)
s1 = "-"
seq = ("r", "u", "n", "o", "o", "b") # 字符串序列
print (s1.join( seq )) = 'r-u-n-o-o-b'
swapcase()把字符串中的大写转小写，小写转大写
title()返回标题化字符串，每个单词首字母大写  其余小写	
translate(table, deletechars="")翻译
intab = "aeiou"
outtab = "12345"
trantab = str.maketrans(intab, outtab)   # 制作翻译表
str = "this is string example....wow!!!"
print (str.translate(trantab)) = th3s 3s str3ng 2x1mpl2....w4w!!!

list.pop(obj = list[-1])移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
list.remove(obj)移除列表中某个值的第一个匹配项
list.reverse()反向列表中元素
list.sort([func])对原列表进行排序
list.clear()清空列表
list.copy()复制列表

元组：
元组使用小括号，列表使用方括号，字典使用花括号


slif代替了else if
age = int(input("请输入你家狗狗的年龄: "))   age直接是输入数字转化成int之后的值

while 1==1实现无线循环
你可以使用 CTRL+C 来退出当前的无限循环。
无限循环在服务器上客户端的实时请求非常有用。

Pass语句：
pass是空语句，是为了保证程序结构的完整性，不做任何事情一般用作占位语句

sequence = [12, 34, 34, 23, 45, 76, 89]
for i, j in enumerate(sequence):
   print(i, j)
i是索引，j是元素值

迭代器和生成器：
迭代器有两个基本方法：iter()和next()

list=[1,2,3,4]
it = iter(list)    # 创建迭代器对象
print (next(it))   # 输出迭代器的下一个元素
print (next(it))
1
2

可以使用常规for语句进行遍历：
list=[1,2,3,4]
it = iter(list)    # 创建迭代器对象
for x in it:
    print (x, end=" ")
也可以使用next函数
import sys         # 引入 sys 模块
list=[1,2,3,4]
it = iter(list)    # 创建迭代器对象
while True:
    try:
        print (next(it))
    except StopIteration:
        sys.exit()

生成器：没明白？？？？？？？

函数的定义：
函数代码块以def关键字开头，后接函数标识符名称和圆括号（）
第一行语句可以选择性的使用文档字符串用来存放函数说明
函数内容以冒号起始并且缩进
return 表达式结束函数，如果只有return没有表达式相当于return None

python函数的参数传递：
不可变类型：如整数，字符串，元组，如fun（a）传递的只是a的值没有影响到a对象本身，如果在fun（c）的内部修改a的值只是修改了另一个复制的对象并不会影响到a本身
可变对象：类似c++的引用传递，如列表，字典，如fun(la),则是将la真正的传过去，修改后fun外部的la也会受影响
python中一切都是对象，所以我们不能说值传递还是引用传递，我们应该说传可变对象还是不可变对象

匿名函数lambda语法：
sum = lambda arg1, arg2: arg1 + arg2;

变量作用域：
L(Local)局部作用域
E(Enclosing)闭包函数外的函数中
G(Global)全局作用域
B(Built-in)内建作用域
以L->E->G->B的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就去全局找，然后再去内建中找

python中只有模块（module），类（class）以及函数（def，lambda）才会引入新的作用域，其他的代码块如：if/elif/else/,try/except,for/while等是不会引入新的作用域的，也就是说这些语法内定义的变量，外部也可以访问
如：
if True:
	msg = 'I am from Runoob'
msg
'I am from Runoob'

当在内部作用域想修改外部作用域的变量时，就要用global和nonlocal关键字了


































